-----CUSTOMERS-----

---Find the number of customers at the restaurant---
SELECT COUNT(DISTINCT(CUSTOMER_ID)) TOTAL_CUSTOMERS
FROM CUSTOMER;

---Find our 5 most profitable customers and how much they spent in total---
SELECT CUSTOMER_ID, SUM(ORDER_TOTAL) AMOUNT_SPENT
FROM
(SELECT ORDER_ID, SUM(ORDER_ITEM_QUANTITY * ITEM.ITEM_PRICE) AS ORDER_TOTAL
FROM ORDER_ITEM
LEFT JOIN ITEM ON ITEM.ITEM_ID = ORDER_ITEM.ITEM_ID
GROUP BY ORDER_ID) AS SQ
LEFT JOIN RESTAURANT_ORDERS RO ON RO.ORDER_ID = SQ.ORDER_ID
GROUP BY CUSTOMER_ID
ORDER BY SUM(ORDER_TOTAL) DESC
LIMIT 5;

---Find the customer(s) name that ordered the most and how many orders they made---
SELECT CONCAT(CUSTOMER_FNAME,' ', CUSTOMER_LNAME) CUSTOMER, COUNT(ORDER_ID) TOTAL_ORDER_MADE
FROM RESTAURANT_ORDERS RO
LEFT JOIN CUSTOMER CU ON CU.CUSTOMER_ID = RO.CUSTOMER_ID
GROUP BY CU.CUSTOMER_ID
HAVING COUNT(ORDER_ID) = -- query returns 10
(SELECT MAX(ORDER_MADE)
FROM
(SELECT CUSTOMER_ID,COUNT(ORDER_ID) ORDER_MADE
FROM RESTAURANT_ORDERS
GROUP BY CUSTOMER_ID) SQ);

-----ITEM-----

---Create temporary table (to help answer the following questions)---
DROP TABLE IF EXISTS TEMP_ITEM;
CREATE TEMPORARY TABLE TEMP_ITEM (
	ITEM_NAME VARCHAR(30) NOT NULL,
	ORDER_ITEM_QUANTITY SMALLINT NOT NULL,
	ITEM_PRICE NUMERIC NOT NULL
);

-- Insert data
INSERT INTO TEMP_ITEM
SELECT ITEM_NAME, ORDER_ITEM_QUANTITY,ITEM_PRICE
FROM ORDER_ITEM
LEFT JOIN ITEM ON ITEM.ITEM_ID = ORDER_ITEM.ITEM_ID;

--Preview temporary table
SELECT *
FROM TEMP_ITEM;

---Show the most to least popular item that was sold--- 
SELECT ITEM_NAME, SUM(ORDER_ITEM_QUANTITY) ITEM_SOLD
FROM TEMP_ITEM
GROUP BY ITEM_NAME
ORDER BY ITEM _SOLD DESC;

---Find the revenue generated by each item---
SELECT ITEM_NAME, SUM(ORDER_ITEM_QUANTITY * ITEM_PRICE) ITEM_TOTAL
FROM TEMP_ITEM
GROUP BY ITEM_NAME
ORDER BY ITEM_TOTAL DESC;

-----MENU-----

---Create temporary table (to help answer the following questions)---
DROP TABLE IF EXISTS TEMP_MENU;
CREATE TEMPORARY TABLE TEMP_MENU (
	MENU_TYPE VARCHAR (30) NOT NULL,
	ORDER_ITEM_QUANTITY SMALLINT NOT NULL,
	ITEM_PRICE NUMERIC NOT NULL
);

-- Insert data
INSERT INTO TEMP_MENU
SELECT MENU_TYPE, ORDER_ITEM_QUANTITY,ITEM_PRICE
FROM ORDER_ITEM
LEFT JOIN ITEM ON ITEM.ITEM_ID = ORDER_ITEM.ITEM_ID
LEFT JOIN MENU ON ITEM.MENU_ID = MENU.MENU_ID;

-- Alter temp table columns name 
ALTER TABLE TEMP_MENU RENAME COLUMN ORDER_ITEM_QUANTITY TO QUANTITY;
ALTER TABLE TEMP_MENU RENAME COLUMN ITEM_PRICE TO REVENUE;

-- Preview temporary table
SELECT *
FROM TEMP_MENU;

---Create a function to find total quantity and revenue a menu generated---
CREATE FUNCTION MENU_TYPE_DETAILS(MENU VARCHAR(30)) 
RETURNS SETOF TEMP_MENU AS 
$$
SELECT MENU_TYPE, SUM(QUANTITY), SUM(QUANTITY * REVENUE)
FROM TEMP_MENU
WHERE MENU_TYPE ILIKE MENU -- ILIKE to ignore case sensitivity
GROUP BY MENU_TYPE
$$ 
LANGUAGE SQL;

-- Call the function for Korean Menu
SELECT *
FROM MENU_TYPE_DETAILS('Korean');

-- Call the function for Japanese Menu
SELECT *
FROM MENU_TYPE_DETAILS('Japanese'); 

---Convert total revenue a menu generated in % to total revenue made in the restaurant---
WITH CTE_MENU AS (
SELECT MENU_TYPE, SUM(ORDER_ITEM_QUANTITY * ITEM_PRICE) TOTAL_MENU
FROM TEMP_MENU
GROUP BY MENU_TYPE)
SELECT MENU_TYPE, ROUND(TOTAL_MENU / (SUM(TOTAL_MENU) OVER()) * 100, 2) AS TOTAL_MENU_PERCENT
FROM CTE_MENU
ORDER BY TOTAL_MENU_PERCENT DESC;

-----MONTH-----

---Find the total amount made during a month (most to least)---
WITH CTE_ORDER AS (
SELECT ORDER_ID, SUM(ORDER_ITEM_QUANTITY * ITEM_PRICE) TOTAL
FROM ORDER_ITEM
LEFT JOIN ITEM ON ITEM.ITEM_ID = ORDER_ITEM.ITEM_ID
GROUP BY ORDER_ID)
SELECT TO_CHAR(ORDER_DATE, 'Month') MONTHS, SUM(TOTAL) TOTAL
FROM CTE_ORDER
LEFT JOIN RESTAURANT_ORDERS RO ON CTE_ORDER.ORDER_ID = RO.ORDER_ID 
GROUP BY MONTHS
ORDER BY TOTAL DESC
